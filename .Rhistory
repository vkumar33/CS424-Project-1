type="scatter",mode="lines+markers") %>%
layout(title = paste("AQI over the year" , input$Year))
})
output$compareleaf <- renderLeaflet({
map <- leaflet(data5())
map <- addTiles(map)
#map <- setView(map, lng = Longitude, lat = Latitude, zoom = 4)
map <- addCircleMarkers(map,lng = Longitude, lat = Latitude,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
popup = paste("County:",County , "<br>", "State:",State ,"<br>", "Values: ", value))
map
})
output$cmap <- renderPlot({
county_choropleth(data5(), title = "Fake News", legend = "Fake", num_colors = 2,state_zoom = NULL, county_zoom = NULL, reference_map = FALSE)
})
}
shinyApp(server = server, ui = ui)
runApp()
runApp()
runApp()
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df
setwd("C:/Users/vikas/OneDrive/Fall 2018/2nd Sem/Visualization/P1")
runApp('final_ggplot.R')
?fread
#library(devtools)
library(shiny)
library(shinydashboard)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(tidyr)
library(plotly)
library(magrittr)
library(dplyr)
library(pillar)
library(tidyverse)
require(devtools)
#devtools::install_github('hadley/ggplot2')
library(ggplot2)
library(data.table)
#install_github("nik01010/dashboardthemes")
#library(dashboardthemes)
#library(maps)
#library(maptools)
#library(rworldmap)
#library(ggmap)
#If you want to load ggmaps then use the following parameters
#register_google(key = "AIzaSyCpkAR0EuIp5K2hK1ke-9JexMzBBVrcK6o")
#require(devtools)
#devtools::install_github("dkahle/ggmap", ref = "tidyup")
#Load files from directory
#f <- file.choose("aqs_sites.csv")
mapdata <- read.csv(file = "aqs_sites.csv",header = TRUE, sep = ",")
temp = list.files(pattern="^an.*csv")
allData2 <- lapply(temp, fread)
allData3 <- do.call(rbind, allData2)
#Converting columns to character and numeric class
allData3$County <- as.character(allData3$County)
allData3$Year <- as.numeric(as.character(allData3$Year))
allData3$State <- as.character(allData3$State)
#Making a copy of original Dataframe
allData4 <- allData3
#Renaming column names
colnames(allData3)[c(5:10)] <- c("Good","Moderate","Unhealthy(Sensitive)","Unhealthy","Very Unhealthy","Hazardous")
colnames(allData3)[c(11:13)] <- c("Max AQI", "90th Percentile of AQI","Median AQI")
colnames(allData3)[c(14:19)] <- c("CO","NO2","Ozone","SO2","PM2_5","PM10")
#Making a copy of modified Dataframe
allData5 <- allData3
#Creating new column AQI Parameters and Days which has the aggregate days of all AQI parameters
allData3Gather <- gather(allData3, "AQI Parameters", "Days", 5:10)
#Creating new column Pollutants and Days which has the aggregate days of all Pollutants
allData3Gather2 <- gather(allData3, "Pollutants", "Days", 14:19)
#Creating new column Maxq and Values which has the aggregate of Max AQI, median and 90th Percentile of AQI
allData3Gather3 <- gather(allData3,"Maxq", "Values", 11:13)
#Creating new columns which has aggregate percentage of all pollutant types
allData4$CO <- (allData4$Days.CO / allData4$Days.with.AQI)* 100
allData4$NO2 <- (allData4$Days.NO2 / allData4$Days.with.AQI) *100
allData4$Ozone <- (allData4$Days.Ozone / allData4$Days.with.AQI) *100
allData4$SO2 <- (allData4$Days.SO2 / allData4$Days.with.AQI) * 100
allData4$PM2_5 <- (allData4$Days.PM2.5 / allData4$Days.with.AQI) * 100
allData4$PM_10 <- (allData4$Days.PM10 / allData4$Days.with.AQI) * 100
allData4 <- allData4 %>% mutate_if(is.numeric, round, 2)
allData4Gather <- gather(allData4,"PollutantsP","Values",20:25)
#Creating new columns which has aggregate percentage of all AQI types
allData5$Good <- (allData5$Good / allData5$Days.with.AQI)* 100
allData5$Moderate <- (allData5$Moderate / allData5$Days.with.AQI) *100
allData5$`Unhealthy(Sensitive)` <- (allData5$`Unhealthy(Sensitive)` / allData5$Days.with.AQI) *100
allData5$Unhealthy <- (allData5$Unhealthy / allData5$Days.with.AQI) * 100
allData5$`Very Unhealthy` <- (allData5$`Very Unhealthy` / allData5$Days.with.AQI) * 100
allData5$Hazardous <- (allData5$Hazardous / allData5$Days.with.AQI) * 100
allData5 <- allData5 %>% mutate_if(is.numeric, round, 2)
allData5Gather <- gather(allData5,"AQIP","Values",5:10)
colnames(allData5)
runApp('final_ggplot.R')
runApp('final_ggplot.R')
runApp('final_ggplot.R')
runApp('final_ggplot.R')
#library(devtools)
library(shiny)
library(shinydashboard)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(tidyr)
library(plotly)
library(magrittr)
library(dplyr)
library(pillar)
library(tidyverse)
require(devtools)
#devtools::install_github('hadley/ggplot2')
library(ggplot2)
library(data.table)
#install_github("nik01010/dashboardthemes")
#library(dashboardthemes)
#library(maps)
#library(maptools)
#library(rworldmap)
#library(ggmap)
#If you want to load ggmaps then use the following parameters
#register_google(key = "AIzaSyCpkAR0EuIp5K2hK1ke-9JexMzBBVrcK6o")
#require(devtools)
#devtools::install_github("dkahle/ggmap", ref = "tidyup")
#Load files from directory
#f <- file.choose("aqs_sites.csv")
mapdata <- read.csv(file = "aqs_sites.csv",header = TRUE, sep = ",")
temp = list.files(pattern="^an.*csv")
allData2 <- lapply(temp, fread, stringsAsFactors = TRUE)
allData3 <- do.call(rbind, allData2)
allData3 <- allData3%>%
arrange(State)
#Converting columns to character and numeric class
allData3$County <- as.character(allData3$County)
allData3$Year <- as.numeric(as.character(allData3$Year))
allData3$State <- as.character(allData3$State)
#Making a copy of original Dataframe
allData4 <- allData3
#Renaming column names
colnames(allData3)[c(5:10)] <- c("Good","Moderate","Unhealthy(Sensitive)","Unhealthy","Very Unhealthy","Hazardous")
colnames(allData3)[c(11:13)] <- c("Max AQI", "90th Percentile of AQI","Median AQI")
colnames(allData3)[c(14:19)] <- c("CO","NO2","Ozone","SO2","PM2_5","PM10")
#Making a copy of modified Dataframe
allData5 <- allData3
#Creating new column AQI Parameters and Days which has the aggregate days of all AQI parameters
allData3Gather <- gather(allData3, "AQI Parameters", "Days", 5:10)
#Creating new column Pollutants and Days which has the aggregate days of all Pollutants
allData3Gather2 <- gather(allData3, "Pollutants", "Days", 14:19)
#Creating new column Maxq and Values which has the aggregate of Max AQI, median and 90th Percentile of AQI
allData3Gather3 <- gather(allData3,"Maxq", "Values", 11:13)
#Creating new columns which has aggregate percentage of all pollutant types
allData4$CO <- (allData4$`Days CO` / allData4$`Days with AQI`)* 100
allData4$NO2 <- (allData4$`Days NO2` / allData4$`Days with AQI`) *100
allData4$Ozone <- (allData4$`Days Ozone` / allData4$`Days with AQI`) *100
allData4$SO2 <- (allData4$`Days SO2` / allData4$`Days with AQI`) * 100
allData4$PM2_5 <- (allData4$`Days PM2.5` / allData4$`Days with AQI`) * 100
allData4$PM_10 <- (allData4$`Days PM10` / allData4$`Days with AQI`) * 100
allData4 <- allData4 %>% mutate_if(is.numeric, round, 2)
allData4Gather <- gather(allData4,"PollutantsP","Values",20:25)
#Creating new columns which has aggregate percentage of all AQI types
allData5$Good <- (allData5$Good / allData5$`Days with AQI`)* 100
allData5$Moderate <- (allData5$Moderate / allData5$`Days with AQI`) *100
allData5$`Unhealthy(Sensitive)` <- (allData5$`Unhealthy(Sensitive)` / allData5$`Days with AQI`) *100
allData5$Unhealthy <- (allData5$Unhealthy / allData5$`Days with AQI`) * 100
allData5$`Very Unhealthy` <- (allData5$`Very Unhealthy` / allData5$`Days with AQI`) * 100
allData5$Hazardous <- (allData5$Hazardous / allData5$`Days with AQI`) * 100
allData5 <- allData5 %>% mutate_if(is.numeric, round, 2)
allData5Gather <- gather(allData5,"AQIP","Values",5:10)
View(allData3Gather)
View(allData3Gather)
?ggplot
View(allData3Gather2)
View(allData3Gather2)
View(allData3Gather3)
View(allData3Gather3)
View(allData4Gather)
View(allData4Gather)
# Dreate the shiny dashboard
ui <- dashboardPage(
dashboardHeader(title = "Just Breathe"),
dashboardSidebar(disable = FALSE, collapsed = FALSE,
selectInput("Year", "Select the year to visualize", years, selected = 2018),
selectInput("State", "Select the State to visualize", states, selected = "Illinois"),
selectInput("County", "Select the County to visualize", counties, selected = "Cook"),
sidebarMenu(
menuItem("About",tabName = "about"),
menuItem("AQI Quality",tabName = "aqiquality"),
menuItem("Pollutant Types",tabName = "Pollutant"),
menuItem("Compare Data of 3 Counties", tabName = "comparedata")
)),
dashboardBody(
tabItems(
tabItem("about", includeHTML("about.html")),
tabItem("aqiquality",
fluidRow(
column(12,
fluidRow(
box(
width = 18,
status = "info",
dataTableOutput("AQIQualityTable")
),
box(
width=15,status = "info", plotlyOutput("AQImaxq")
),
box(
width=15,status = "info", plotlyOutput("AQImaxq1")
)
)
),
column(4,
fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("AQIPiePlot")
)
)
),
column(5,
fluidRow(
box(
width = 18,
status = "info",
plotlyOutput("AQIBarGraph")
)
)
)
)
),
tabItem("Pollutant",
fluidRow(
column(12,
fluidRow(
box(
width = 14,
status = "info",
dataTableOutput("PollutantinfoTable")
),
box(width = 14, status = "info",dataTableOutput("PollutantTypeTable")),
box(width=15,status = "info", plotlyOutput("Pollutantline"))
)
),
column(4,
fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("PollutantinfoPiePlot")
)
)),
column(4,fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("PollutantinfoBarGraph")
))),
column(4,fluidRow(
box(title = "Leaflet Map", solidHeader = TRUE, status = "primary", width = 12,
leafletOutput("leaf")
)
)
)
)
),
tabItem("comparedata",
fluidRow(
fluidRow(box(width = 4, selectInput("Year1", "Select the year to visualize", years1, selected = 2018, width="120px"),
selectInput("State1", "Select the 1st State to visualize", states1, selected = "Illinois", width="120px"),
selectInput("County1", "Select the 1st County to visualize", counties1, selected = "Cook", width="120px")),
box(width = 4, selectInput("Year2", "Select the year to visualize", years2, selected = 2018, width="120px"),
selectInput("State2", "Select the 2nd State to visualize", states2, selected = "Illinois", width="120px"),
selectInput("County2", "Select the 2nd County to visualize", counties2, selected = "Cook",width="120px")),
box(width = 4, selectInput("Year3", "Select the year to visualize", years3, selected = 2018, width="120px"),
selectInput("State3", "Select the 3rd State to visualize", states3, selected = "Illinois", width="120px"),
selectInput("County3", "Select the 3rd County to visualize", counties3, selected = "Cook",width="120px"))),
column(12,
fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("Compare_aqiBarGraph")
)
)),
column(12,fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("Compare_pollutantBarGraph")
))),
column(12,fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("Compare_aqiLineGraph")
))),
column(12,fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("Compare_pollutantLineGraph")
)))
)
)
)
)
)
runApp()
View(allData4Gather)
View(allData4Gather)
runApp()
View(allData3Gather2)
View(allData3Gather2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(tidyr)
library(plotly)
library(magrittr)
library(dplyr)
library(pillar)
library(tidyverse)
require(devtools)
#devtools::install_github('hadley/ggplot2')
library(ggplot2)
library(data.table)
#install_github("nik01010/dashboardthemes")
#library(dashboardthemes)
#library(maps)
#library(maptools)
#library(rworldmap)
#library(ggmap)
#If you want to load ggmaps then use the following parameters
#register_google(key = "AIzaSyCpkAR0EuIp5K2hK1ke-9JexMzBBVrcK6o")
#require(devtools)
#devtools::install_github("dkahle/ggmap", ref = "tidyup")
#Load files from directory
#f <- file.choose("aqs_sites.csv")
mapdata <- read.csv(file = "aqs_sites.csv",header = TRUE, sep = ",")
temp = list.files(pattern="^an.*csv")
allData2 <- lapply(temp, fread, stringsAsFactors = TRUE)
allData3 <- do.call(rbind, allData2)
allData3 <- allData3%>%
arrange(State)
#Converting columns to character and numeric class
allData3$County <- as.character(allData3$County)
allData3$Year <- as.numeric(as.character(allData3$Year))
allData3$State <- as.character(allData3$State)
#Making a copy of original Dataframe
allData4 <- allData3
#Renaming column names
colnames(allData3)[c(5:10)] <- c("Good","Moderate","Unhealthy(Sensitive)","Unhealthy","Very Unhealthy","Hazardous")
colnames(allData3)[c(11:13)] <- c("Max AQI", "90th Percentile of AQI","Median AQI")
colnames(allData3)[c(14:19)] <- c("CO","NO2","Ozone","SO2","PM2_5","PM10")
#Making a copy of modified Dataframe
allData5 <- allData3
#Creating new column AQI Parameters and Days which has the aggregate days of all AQI parameters
allData3Gather <- gather(allData3, "AQI Parameters", "Days", 5:10)
#Creating new column Pollutants and Days which has the aggregate days of all Pollutants
allData3Gather2 <- gather(allData3, "Pollutants", "Days", 14:19)
#Creating new column Maxq and Values which has the aggregate of Max AQI, median and 90th Percentile of AQI
allData3Gather3 <- gather(allData3,"Maxq", "Values", 11:13)
#Creating new columns which has aggregate percentage of all pollutant types
allData4$CO <- (allData4$`Days CO` / allData4$`Days with AQI`)* 100
allData4$NO2 <- (allData4$`Days NO2` / allData4$`Days with AQI`) *100
allData4$Ozone <- (allData4$`Days Ozone` / allData4$`Days with AQI`) *100
allData4$SO2 <- (allData4$`Days SO2` / allData4$`Days with AQI`) * 100
allData4$PM2_5 <- (allData4$`Days PM2.5` / allData4$`Days with AQI`) * 100
allData4$PM_10 <- (allData4$`Days PM10` / allData4$`Days with AQI`) * 100
allData4 <- allData4 %>% mutate_if(is.numeric, round, 2)
allData4Gather <- gather(allData4,"PollutantsP","Values",20:25)
#Creating new columns which has aggregate percentage of all AQI types
allData5$Good <- (allData5$Good / allData5$`Days with AQI`)* 100
allData5$Moderate <- (allData5$Moderate / allData5$`Days with AQI`) *100
allData5$`Unhealthy(Sensitive)` <- (allData5$`Unhealthy(Sensitive)` / allData5$`Days with AQI`) *100
allData5$Unhealthy <- (allData5$Unhealthy / allData5$`Days with AQI`) * 100
allData5$`Very Unhealthy` <- (allData5$`Very Unhealthy` / allData5$`Days with AQI`) * 100
allData5$Hazardous <- (allData5$Hazardous / allData5$`Days with AQI`) * 100
allData5 <- allData5 %>% mutate_if(is.numeric, round, 2)
allData5Gather <- gather(allData5,"AQIP","Values",5:10)
View(allData3Gather2)
View(allData3Gather2)
runApp()
View(allData3Gather3)
View(allData3Gather3)
View(allData4Gather)
View(allData4Gather)
runApp()
runApp()
df9 <- allData4Gather[allData4Gather$State == "Illinois" & allData4Gather$County == "Cook" & allData4Gather$Year == 2018,]
df9 <- df9 %>%
arrange(County)
df9
ggplot(df9 +
geom_bar(aes("",y=df9$Values,  fill=df9$PollutantsP), width = 1, stat = "identity") + coord_polar("y") +
labs( title = paste("AQI types for", "2018")) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "#666666"))
df9 <- allData4Gather[allData4Gather$State == "Illinois" & allData4Gather$County == "Cook" & allData4Gather$Year == 2018,]
df9 <- df9 %>%
arrange(County)
g <- ggplot(df9 +
geom_bar(aes("",y=df9$Values,  fill=df9$PollutantsP), width = 1, stat = "identity") + coord_polar("y") +
labs( title = paste("AQI types for", "2018")) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "#666666"))
g
library(shiny)
library(shinydashboard)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(tidyr)
library(plotly)
library(magrittr)
library(dplyr)
library(pillar)
library(tidyverse)
require(devtools)
#devtools::install_github('hadley/ggplot2')
library(ggplot2)
library(data.table)
df9 <- allData4Gather[allData4Gather$State == "Illinois" & allData4Gather$County == "Cook" & allData4Gather$Year == 2018,]
df9 <- df9 %>%
arrange(County)
g <- ggplot(df9 +
geom_bar(aes("",y=df9$Values,  fill=df9$PollutantsP), width = 1, stat = "identity") + coord_polar("y") +
labs( title = paste("AQI types for", "2018")) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "#666666"))
df9 <- allData4Gather[allData4Gather$State == "Illinois" & allData4Gather$County == "Cook" & allData4Gather$Year == 2018,]
df9 <- df9 %>%
arrange(County)
g <- ggplot(df9 +
geom_bar(aes("",y=df9$Values,  fill=df9$PollutantsP), width = 1, stat = "identity") + coord_polar("y") +
labs( title = paste("AQI types for", "2018")) +
theme_classic()
df9 <- allData4Gather[allData4Gather$State == "Illinois" & allData4Gather$County == "Cook" & allData4Gather$Year == 2018,]
df9 <- df9 %>%
arrange(County)
g <- ggplot(df9) +
geom_bar(aes("",y=df9$Values,  fill=df9$PollutantsP), width = 1, stat = "identity") + coord_polar("y") +
labs( title = paste("AQI types for", "2018")) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "#666666"))
g
runApp()
runApp()
runApp()
df9 <- allData4Gather[allData4Gather$State == "Illinois" & allData4Gather$County == "Cook" & allData4Gather$Year == 2018,]
df9 <- df9 %>%
arrange(County)
pieplot <-ggplot(df9,aes("",y=df9$Values,  fill=df9$PollutantsP)) +
geom_bar( width = 1, stat = "identity") + coord_polar("y") +
labs( title = paste("AQI types for", input$Year)) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "#666666"))
pieplot
pieplot <-ggplot(df9,aes("",y=df9$Values,  fill=df9$PollutantsP)) +
geom_bar( width = 1, stat = "identity") + coord_polar("y") +
labs( title = paste("AQI types for", 2018)) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "#666666"))
pieplot
runApp()
runApp()
runApp()
runApp()
runApp('final_ggplot.R')
runApp('final_ggplot.R')
